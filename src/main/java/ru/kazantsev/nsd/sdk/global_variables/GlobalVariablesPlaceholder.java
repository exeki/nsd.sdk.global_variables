package ru.kazantsev.nsd.sdk.global_variables;

import ru.naumen.core.shared.dto.ISDtObject;
import ru.naumen.core.shared.userevents.UserEventActionResult;

import java.util.List;
import java.util.Map;

/** Пустой placeholder переменных контекста скриптового действия по событию */
@SuppressWarnings("unused")
public class GlobalVariablesPlaceholder {

    /**
     * Пользователь, инициализировавший событие. Является объектом класса "Сотрудник" (employee).
     * Если событие инициализировал суперпользователь, то user=null.
     * Если событие инициализировано скриптом (скриптовое действие по событию, скрипт на вход в статус),
     * то переменная user берется из контекста инициировавшего его скрипта.
     */
    public static ISDtObject user;

    /**
     * ip-адрес рабочего места пользователя user.
     * Если действие выполняется автоматически системой (а не пользователем), то переменная не определяется.
     */
    public static String ip;

    /** версия приложения. */
    public static String appVersion;

    /**
     * текущий объект, над которым производится действие (значение переменной может быть null).
     * В переменной subject хранятся значения атрибутов объекта на момент добавления действия по событию в очередь.
     */
    public static ISDtObject subject;

    /**
     * значения полей формы, на которой присутствует параметр с признаком "Вычисление значения",
     * в том числе текущее значение данного параметра (представление объекта на клиенте).
     */
    public static ISDtObject form;

    /**
     * объекты, выбранные в списке объектов (если событие вызвано из списка объектов),
     * или текущий объект (если событие вызвано из карточки объекта).
     * Переменная содержит только те объекты, относительно которых у
     * текущего пользователя есть право на выполняемое действие. Если прав нет, subjects = null.
     */
    public static ISDtObject subjects;

    /**
     * текущий объект, над которым производится действие (значение переменной может быть null).
     * В переменной subject хранятся значения атрибутов объекта на момент добавления действия по событию в очередь.
     * Для события "Редактирование комментария" в качестве oldSubject передается объект источник комментария.
     * Событие "Добавление комментария" не является изменением объекта, поэтому в значении переменной будет null.
     * При использовании переменной значение атрибутов типа "Обратная ссылка" всегда будет равно null.
     */
    public static ISDtObject oldSubject ;

    /**
     * текущий объект, над которым производится действие. В переменной currentSubject хранятся
     * значения атрибутов объекта на момент обработки действия по событию с учетом изменений,
     * которые внесли уже отработавшие действия по событию. Переменная currentSubject недоступна
     * для пользовательских действий по событию.
     */
    public static ISDtObject currentSubject ;

    /**
     * список кодов атрибутов, значения которых изменились при редактировании объекта.
     * Вычислимые атрибуты не попадают в контекстную переменную changedAttributes, так как значения
     * вычислимых атрибутов (в том числе атрибута типа "Атрибут связанного объекта")
     * вычисляются при отображении, не хранятся в базе данных и не редактируются в интерфейсе оператора.
     * При редактировании атрибута типа "Обратная ссылка" на форме редактирования объекта,
     * атрибут попадает в список измененных атрибутов. При изменении атрибута типа "Обратная ссылка"
     * также изменяется объект, на который ведет прямая ссылка.
     */
    public static List<String> changedAttributes;

    /**
     * объект, из карточки которого было инициировано действие.
     * Если действие инициировано НЕ из карточки объекта, то cardObject = null.
     */
    public static ISDtObject cardObject;

    /** оповещение */
    public static Object notification;

    /**
     * критерии выборки объектов, если действие было инициировано из списка.
     * используя данную переменную можно получить коллекцию объектов, отображаемых в списке
     */
    public static Object objectListContext;

    /**
     * информация о местоположении мобильного устройства, при инициации события из мобильного клиента.
     * В переменной хранятся сведения о широте (latitude) и долготе (longitude) текущего местоположения мобильного устройства.
     * Значение переменной может быть null, зависит от разрешения использования геолокации на мобильном устройстве
     * и настройки элемента меню карточки объекта в мобильном приложении, вызывающего
     * данное действие по событию (включен параметр "Передавать геопозицию устройства").
     */
    public static Object geo;

    /**
     * значения параметров действия по событию, заполняемых в интерфейсе на форме выполнения пользовательского действия по событию.
     * До версии 4.7 переменная "params" могла использоваться в скриптах для любых целей.
     * С версии 4.7 и старше скрипты с переменной "params" работают по указанной системной
     * логике (обращение к параметрами на форме), другая логика переменной игнорируется.
     * Чтобы использовать другую логику переменной params, необходимо заменить в существующих
     * скриптах название своей переменной "params" на какое-то другое.
     */
    public static Map<String, Object> params;

    /** строка, способ вызова события (OBJECT_LIST из списка объектов, OBJECT_CARD из карточки). */
    public static String source;

    /**
     * все объекты списка. Количество объектов коллекции ограничивается 1000.
     * Переменная доступна, если событие вызвано из списка объектов.
     * Метод limitExceeded() возвращает true, если лимит превышен, и часть объектов списка
     * не попали в данную коллекцию. Возвращает false, если в коллекции 1000 и меньше объектов.
     */
    public static List<ISDtObject> list;

    /**
     * В скрипте действия по событию используется переменная result,
     * с помощью которой устанавливается действие, производимое после события.
     * Методы переменной result используются только для синхронных действий по событию.
     */
    public static UserEventActionResult result;
}
